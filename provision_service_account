#!/usr/bin/env bash

set -o errexit
set -o nounset
#set -x

GREEN="\033[0;32m"
YELLOW="\033[0;33m"
END="\033[0m"

script_basename=$(basename "$0")
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
package_acls_basedir="${script_dir}/packages"
verbose="false"

service_name=""
service_role=""
service_account=""
quota_enforced=""
group_quota_enforced=""
package_quota_enforced=""

dcos_version=""
dcos_security_mode=""
dcos_auth_token=""
dcos_url=""

package_name=""
package_version=""
package_acls_dir=""
latest_package_version=""
service_name=""
service_account=""

v2_groups=""
group_exists=""
group_role_enforced=""

print_info()
{
    if [[ "$verbose" == "true" ]]
    then
        echo "INFO: $@"
    fi
}

get_latest_package_version()
{
    local package_name="${1}"
    package_version=$(dcos package describe --package-versions "$package_name" | jq -r .[-1])
}

get_dcos_version()
{
    print_info "getting DC/OS version"
    dcos_version="$(dcos_get /dcos-metadata/dcos-version.json | jq -r .version)"
    if [[ $? -ne 0 ]]
    then
        echo "Error fetching DC/OS version"
        exit 1
    fi
    print_info "DC/OS version detected $dcos_version"
}

get_dcos_security_mode()
{
    print_info "getting DC/OS security mode"
    dcos_security_mode="$(dcos_get /dcos-metadata/bootstrap-config.json | jq -r .security)"
    if [[ $? -ne 0 ]]
    then
        echo "Error fetching DC/OS security mode"
        exit 1
    fi
    print_info "DC/OS security mode detected $dcos_version"
}


dcos_get()
{
    local endpoint="${1}"
    if [[ -z $dcos_auth_token || -z $dcos_url ]]
    then
        dcos_url="$(dcos config show core.dcos_url)"
        dcos_auth_token="$(dcos config show core.dcos_acs_token)"
    fi
    curl -s -k -L -X GET \
        -H "Authorization: token=${dcos_auth_token}" \
        "${dcos_url}/${endpoint}"
}

get_v2_groups()
{
    if [[ -z "$v2_groups" ]]
    then
        v2_groups="$(dcos_get /marathon/v2/groups)"
        if [[ $? -ne 0 ]]
        then
            echo "Error fetching marathon groups"
            exit 1
        fi
    fi
}

get_group_exists()
{
    local top_level_group="${1}"
    print_info "cheking if top level group \"$top_level_group\" exists"
    get_v2_groups
    group_exists=$(echo "$v2_groups" | jq --arg TLG $top_level_group '[.groups[].id==$TLG] | any')
}

get_group_role_enforced()
{
    local top_level_group="${1}"
    get_v2_groups
   group_role_enforced=$(echo "$v2_groups" | jq --arg TLG $top_level_group '.groups[] | select(.id==$TLG) | .enforceRole')
}

get_package_acls_dir()
{
    local package_name="${1}"
    local package_version="${2}"

    package_acls_dir=${package_acls_basedir}/${package_name}/${package_version}

    if [[ ! -d "${package_acls_dir}" ]]
    then
        echo "Cannot find package ACLS directory"
        package_acls_dir=""
        return 
    fi
}

# Compute_ quota_enforced based on package
get_quota_enforced_by_package()
{
    local package_name="${1}"
    local package_version="${2}"

    get_package_acls_dir "${package_name}" "${package_version}"
    if [[ -z "$package_acls_dir" ]]
    then
        echo "Cannot determine if the package ${package_name} ${package_version} is quota aware"
        exit 1
    fi

   if [[ -f "${package_acls_dir}/quota-aware" ]]
    then
        print_info "Package $package_name version $package_version is quota aware"
        package_quota_enforced="true"
    else
        print_info "Package $package_name version $package_version is not quota aware"
        package_quota_enforced="false"
    fi
}

# Compute quota_enforced based on service path
##############################################################
# Service path                             #  quota_enforced #
##############################################################
# Root level service (/service-name)       #   false         # 
# Non-root level service (new group)       #   true          #
# Non-root level service (existing group)  #   enforceRole   #
##############################################################
get_quota_enforced_by_path()
{
    local service_name=${1}
    if [[ "$service_name" != */* ]]
    then
        # Root level service
        print_info "Root level service setting quota_enforced to FALSE"
        group_quota_enforced="false"
        return
    fi
    # else (Non-root level service)_
    top_level_group="${service_name%%/*}"
    print_info "Top level group for service \"$service_name\" is $top_level_group"
    get_group_exists "/${top_level_group}"
    if [[ "$group_exists" == "false" ]]
    then
        # new group
        print_info "New group setting quota_enforced to TRUE"
        group_quota_enforced="true"
    else
        # existing group
        print_info "Existing group need to check enforceRole"
        get_group_role_enforced "/${top_level_group}"
        if [[ "$group_role_enforced" == "true" ]]
        then
           group_quota_enforced="true"
        else
           group_quota_enforced="false"
        fi
    fi
}

# Compute quota enforced based on 
# 1) DC/OS version
# 2) Package name and version (if quota aware)
# 3) Top level group roleEnforce setting
get_quota_enforced()
{
    local service_name=${1}
    local package_name=${2}
    local package_version=${3}
    get_dcos_version

    case $dcos_version in
        2.0.0)
            echo "We recommend upgrading to DC/OS version 2.0.0. See MARATHON-8713"
            exit 0
            ;;
        1.*)
            print_info "DC/OS version 1.x, setting quota_enforced to FALSE"
            quota_enforced="false"
            ;;
        2.*)
            print_info "DC/OS version 2.x, need to analyze further"
            get_quota_enforced_by_package "${package_name}" "${package_version}"
            if [[ "$package_quota_enforced" == "true" ]]
            then
                get_quota_enforced_by_path "${service_name}"
                if [[ "${group_quota_enforced}" == "true" ]]
                then
                   quota_enforced="true"
               else
                   quota_enforced="false"
                fi
            else
                quota_enforced="false"
            fi
            ;;
    esac
}

get_service_role()
{
    local service_name=${1}
    local package_name=${2}
    local package_version=${3}

    # Trim leading and trailing slash
    service_name="${service_name#/}"
    service_name="${service_name%/}"

    if [[ -z "$quota_enforced" ]]
    then
        print_info "Computing quota enforced based on service name $service_name"
        get_quota_enforced "$service_name" "$package_name" "$package_version" 
        if [[ -z "$quota_enforced" ]]
        then
            echo "Failed to compute quota_enforced"
            exit 1
        fi
    fi
    if [[ "$quota_enforced" == "false" ]]
    then
        print_info "quota enforced FALSE"
        service_role="${service_name//\//__}-role"
    else
        print_info "quota enforced TRUE"
        service_role="${service_name%%/*}"
    fi
}

get_input()
{
    question=${1}
    default=${2}
    echo -en "${YELLOW}$question${END} [default ${GREEN}${default}${END}]: "
    read answer
    answer=${answer:-$default}
}

usage()
{
    echo "USAGE: provision_service_account <package_name> [--package-version=<version>] [--service-name=<service-name>] [--quota-enforced=false|true] [--verbose]"  
}

grant_user_permission()
{
    user=${1}
    perm_string=${2}
    perm_action=${3}

    dcos security org users grant ${user} ${perm_string} ${perm_action}
}

#parse arguments
ARGS=$(getopt -o hv --long "package-version:,quota-enforced:,service-name:,verbose,help" -n "$script_basename" -- "$@")

eval set -- "$ARGS"

while true
do
    case "$1" in
        --package-version) 
            shift
            package_version="${1}"
            shift
            ;;
        --quota-enforced)
            shift
            quota_enforced="${1}"
            shift
            ;;
        --service-name)
            shift
            service_name="${1}"
            shift
            ;;
        -h|--help) 
            usage 
            exit
            ;;
        -v|--verbose) 
            shift
            verbose="true"
            ;;
        --)
            shift
            break
            ;;
        *)  usage
            exit 1
            ;;
    esac
done
if [[ $# -eq 0 ]]; then
    usage
    exit 1
else
    package_name="${1}"
fi

if [[ -z "$package_version" ]]
then
    get_latest_package_version "${package_name}"
    print_info "Package version not specified, using the latest version ${package_version}"
fi

command -v dcos >/dev/null 2>&1 || { echo >&2 "Make sure DC/OS CLI is installed.  Aborting."; exit 1; }
command -v jq >/dev/null 2>&1 || { echo >&2 "Make sure jq is installed.  Aborting."; exit 1; }

if [[ -z "$service_name" ]]
then
    get_input "Enter service name" "${package_name}"
    service_name="${answer}"
fi

# Check if CLI is authed with the cluster
if ! dcos node >/dev/null 2>&1 ; then
    dcos auth login
fi

# Get service role based 
get_service_role "$service_name" "$package_name" "$package_version"
if [[ -z "${service_role}" ]]
then
    echo "Failed to compute service role"
    exit 1
fi

service_account="${service_name#/}"
service_account="${service_account//\//__}"
get_input "Enter service account name" "${service_account}"
service_account="${answer}"

get_input "Enter secret path" "${service_account}/serviceCredential"
secret_path="${answer}"

if ! dcos security --help > /dev/null 2>&1 ; then
    echo "Installing enterprise(security) CLI subcommand"
    if ! dcos package install --yes dcos-enterprise-cli; then
        echo "Failed to install dcos-enterprise cli subcommand" >&2
        exit 1
    fi
fi

echo "Creating keypair"
if ! dcos security org service-accounts keypair private-key.pem public-key.pem; then
    echo "Failed to create keypair for ${service_name} service account" >&2
    exit 1
fi

echo "Creating service account"
#dcos security org service-accounts delete "${service_account}" &> /dev/null
if ! dcos security org service-accounts create -p public-key.pem -d "My service account" "${service_account}"; then
    echo "Failed to create service account '${service_account}'" >&2
    exit 1
fi

echo "Creating secret"
#dcos security secrets delete "${secret_path}" &> /dev/null
if ! dcos security secrets create-sa-secret private-key.pem "${service_account}" "${secret_path}"; then
    echo "Failed to create secret '${secret_path}' for service account '${service_account}'" >&2
    exit 1
fi

echo Service account created for account=${service_account} secret=${secret_path}

get_package_acls_dir "${package_name}" "${package_version}"
if [[ -z "$package_acls_dir" ]]
then
    echo "Cannot determine if the package ${package_name} ${package_version} is quota aware"
    exit 1
fi

get_dcos_security_mode
if [[ "$dcos_security_mode" == "strict" ]]
then
    export strict=true
fi
export service_name
export service_role
export service_account

package_acls=$(mustache ENV "${package_acls_dir}/acls")
if [[ $? -ne 0 ]]
then
    echo "error computing package ACLs"
    exit 1
fi
while read perm_string perm_action 
do
    grant_user_permission "$service_account" "$perm_string" "$perm_action"
done <<< "$package_acls"

echo "Install the package using :"
echo "    dcos package install ${package_name} --options=${service_account}-options.json"
rm -f private-key.pem public-key.pem

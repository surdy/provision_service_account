#!/usr/bin/env bash

set -o errexit
set -o nounset

GREEN="\033[0;32m"
YELLOW="\033[0;33m"
END="\033[0m"

script_basename=$(basename "$0")

service_name=""
service_role=""
service_account=""
quota_enforced=""

dcos_version=""
dcos_security_mode=""
dcos_auth_token=""
dcos_url=""

package_name=""
package_version=""
service_name=""
service_account=""


v2_groups=""

get_dcos_version()
{
    dcos_version="$(dcos_get /dcos-metadata/dcos-version.json | jq -r .version)"
    if [[ $? -ne 0 ]]
    then
        echo "Error fetching DC/OS version"
        exit 1
    fi
}

get_dcos_security_mode()
{
    dcos_version="$(dcos_get /dcos-metadata/bootstrap-config.json | jq -r .security)"
    if [[ $? -ne 0 ]]
    then
        echo "Error fetching DC/OS security mode"
        exit 1
    fi
}


dcos_get()
{
    local endpoint="${1}"
    if [[ -z $dcos_auth_token || -z $dcos_url ]]
    then
        dcos_url="$(dcos config show core.dcos_url)"
        dcos_auth_token="$(dcos config show core.dcos_acs_token)"
    fi
    curl -s -k -L -X GET \ 
        -H "Authorization: token=${dcos_auth_token}" \
        "${dcos_url}/${endpoint}"
}

get_v2_groups()
{
    if [[ -z "$v2_groups" ]]
    then
        v2_groups="$(dcos_get /marathon/v2/groups)"
        if [[ $? -ne 0 ]]
        then
            echo "Error fetching marathon groups"
            exit 1
        fi
    fi
}

group_exists()
{
    local top_level_group="${1}"
    get_v2_groups
    local group_exists=$(echo "$v2_groups" | jq --arg TLG $top_level_group '[.groups[].id==$TLG] | any')
    echo "INFO: Group $top_level_group exits is $group_exists"
    group_exists == "true" ? return $BASH_TRUE : $BASH_FALSE
}

get_group_role_enforced()
{
    local top_level_group="${1}"
    get_v2_groups
    local group_enforce_role=$(echo "$v2_groups" | jq --arg TLG $top_level_group '.groups[] | select(.id==$TLG) | enforceRole')
    echo "INFO: Group $top_level_group role enforcement is $group_enforce_role"
    group_role_enforces == "true" ? return $BASH_TRUE : $BASH_FALSE
}

# Compute quota_enforced based on service path
##############################################################
# Service path                             #  quota_enforced #
##############################################################
# Root level service (/service-name)       #   false         # 
# Non-root level service (new group)       #   true          #
# Non-root level service (existing group)  #   enforceRole   #
##############################################################
get_quota_enforced_by_path()
{
    local service_name=${1}
    if [[ "$service_name" != */* ]]
    then
        # Root level service
        echo "INFO: Root level service setting quota_enforced to FALSE"
        quota_enforced="false"
        return
    fi
    # else (Non-root level service)_
    top_level_group="${service_name%%/*}"
    if [[ ! $(group_exists "/${top_level_group}") ]]
    then
        # new group
        echo "INFO: New group setting quota_enforced to TRUE"
        quota_enforced="true"
    else
        # existing group
        echo "INFO: Existing group need to check enforceRole"
        if [[ get_group_role_enforced "/${top_level_group}" ]]
        then
           quota_enforced="true"
        else
           quota_enforced="false"
        fi
    fi
}

# Compute quota enforced based on 
# 1) DC/OS version
# 2) Top level group roleEnforce setting
get_quota_enforced()
{
    local service_name=${1}
    get_dcos_version

    case $dcos_version in
        2.0.0)
            echo "We recommend upgrading to DC/OS version 2.0.0. See MARATHON-8713"
            exit 0
            ;;
        1.*)
            echo "INFO: DC/OS version 1.x, setting quota_enforced to FALSE"
            quota_enforced="false"
            ;;
        2.*)
            echo "INFO: DC/OS version 2.x, need to analyze further"
            get_quota_enforced_by_path "${service_name}"
            ;;
    esac
}

get_service_role()
{
    local service_name=${1}

    # Trim leading and trailing slash
    service_role="${service_name#/}"
    service_role="${service_name%/}"

    if [[ -z "$quota_enforced}" ]]
    then
        get_quota_enforced
    fi
    if [[ "$get_quota_enforced" == "false" ]]
    then
        service_role="${service_role//\//__}-role"
    else
        service_role="${service_role%%/*}"
    fi
}

get_input()
{
    question=${1}
    default=${2}
    echo -en "${YELLOW}$question${END} [default ${GREEN}${default}${END}]: "
    read answer
    answer=${answer:-$default}
}

usage()
{
    echo "USAGE: provision_service_account <package_name> [--package-version=<version>] [--quota-enforced=false|true]"  
}

grant_user_permission()
{
    user=${1}
    perm_string=${2}
    perm_action=${3}
    description=${4}

    echo "${description}"

    dcos security org users grant ${user} ${perm_string} ${perm_action} --description "${description}"
}
#parse arguments
ARGS=$(getopt -o h --long "package-version:,quota-enforced:,help" -n "$script_basename" -- "$@")

eval set -- "$ARGS"

while true
do
    case "$1" in
        --package-version) 
            shift
            package_version="${1}"
            ;;
        --quota-enforced)
            shift
            quota_enfoced="${1}"
            ;;
        -h|--help) 
            usage 
            exit
            ;;
        --)
            shift
            break
            ;;
        *)  usage
            exit 1
            ;;
    esac
done
if [[ $# -eq 0 ]]; then
    usage
    exit 1
else
    package_name="${1}"
fi

command -v dcos >/dev/null 2>&1 || { echo >&2 "Make sure DC/OS CLI is installed.  Aborting."; exit 1; }
command -v jq >/dev/null 2>&1 || { echo >&2 "Make sure jq is installed.  Aborting."; exit 1; }

get_input "Enter service name" "${package_name}"
service_name="${answer}"

service_account="${service_name#/}"
service_account="${service_account//\//__}"
get_input "Enter service account name" "${service_account}"
service_account="${answer}"

# Get service role based 
get_service_role
if [[ -z "${get_service_role}" ]]
then
    echo "Failed to compute service role"
    exit 1
fi

get_input "Enter secret path" "${service_account}/serviceCredential"
secret_path="${answer}"

# Check if CLI is authed with the cluster
if ! dcos node >/dev/null 2>&1 ; then
    dcos auth login
fi

if ! dcos security --help > /dev/null 2>&1 ; then
    echo "Installing enterprise(security) CLI subcommand"
    if ! dcos package install --yes dcos-enterprise-cli; then
        echo "Failed to install dcos-enterprise cli subcommand" >&2
        exit 1
    fi
fi

echo "Creating keypair"
if ! dcos security org service-accounts keypair private-key.pem public-key.pem; then
    echo "Failed to create keypair for ${service_name} service account" >&2
    exit 1
fi

echo "Creating service account"
#dcos security org service-accounts delete "${service_account}" &> /dev/null
if ! dcos security org service-accounts create -p public-key.pem -d "My service account" "${service_account}"; then
    echo "Failed to create service account '${service_account}'" >&2
    exit 1
fi

echo "Creating secret"
#dcos security secrets delete "${secret_path}" &> /dev/null
if ! dcos security secrets create-sa-secret ${security} private-key.pem "${service_account}" "${secret_path}"; then
    echo "Failed to create secret '${secret_path}' for service account '${service_account}'" >&2
    exit 1
fi

echo Service account created for account=${service_account} secret=${secret_path}

if [[ "${security}" == "--strict" ]]; then
    grant_user_permission ${service_account} \
        "dcos:mesos:master:task:user:nobody" \
        create \
        "Allow ${service_account} to execute Mesos tasks as user=nobody"
fi

grant_user_permission ${service_account} \
    "dcos:mesos:master:framework:role:${service_role}" \
    create \
    "Allow ${service_account} to register as a Mesos framework with role=${service_role}"

grant_user_permission ${service_account} \
    "dcos:mesos:master:reservation:role:${service_role}" \
    create \
    "Allow ${service_account} to create resource reservations on Mesos with role=${service_role}"

grant_user_permission ${service_account} \
    "dcos:mesos:master:volume:role:${service_role}" \
    create \
    "Allow ${service_account} to create volumes on Mesos with role=${service_role}"

grant_user_permission ${service_account} \
    "dcos:mesos:master:reservation:principal:${service_account}" \
    delete \
    "Allow ${service_account} to delete resource reservations on Mesos with principal=${service_account}"

grant_user_permission ${service_account} \
    "dcos:mesos:master:volume:principal:${service_account}" \
    delete \
    "Allow ${service_account} to delete volumes on Mesos with principal=${service_account}"


tee "${service_account}-options.json" <<EOF
{
  "service": {
    "name": "${service_name}",
    "service_account": "${service_account}",
    "service_account_secret": "${secret_path}"
  }
}
EOF

echo "Install the package using :"
echo "    dcos package install ${package_name} --options=${service_account}-options.json"
rm -f private-key.pem public-key.pem
